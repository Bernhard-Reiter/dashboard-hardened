name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: true

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check bundle size budget
        run: npm run size
        continue-on-error: false

      - name: Check lockfile integrity
        run: |
          if ! git diff --quiet package-lock.json; then
            echo "‚ùå package-lock.json was modified!"
            exit 1
          fi

      # Security: SBOM Generation
      - name: Install CycloneDX generator
        run: npm install -g @cyclonedx/cyclonedx-npm@latest

      - name: Generate SBOM (CycloneDX format)
        run: |
          cyclonedx-npm --ignore-npm-errors --output-format JSON --output-file sbom.json
          echo "‚úÖ SBOM generated successfully"
          ls -lh sbom.json

      # Security: Vulnerability Scanning
      - name: Install OSV Scanner
        run: |
          curl -L -o osv-scanner https://github.com/google/osv-scanner/releases/download/v2.2.3/osv-scanner_linux_amd64
          chmod +x osv-scanner
          sudo mv osv-scanner /usr/local/bin/
          osv-scanner --version

      - name: Run OSV vulnerability scan
        run: |
          echo "üîç Scanning SBOM for vulnerabilities..."
          osv-scanner --sbom=sbom.json --format=json --output=vulnerabilities.json || true

          # Parse results and check for HIGH/CRITICAL vulnerabilities
          if [ -f vulnerabilities.json ]; then
            HIGH_COUNT=$(jq '[.results[].packages[].vulnerabilities[] | select(.severity == "HIGH" or .severity == "CRITICAL")] | length' vulnerabilities.json)
            TOTAL_COUNT=$(jq '[.results[].packages[].vulnerabilities[]] | length' vulnerabilities.json)

            echo "üìä Vulnerability Summary:"
            echo "  Total vulnerabilities: $TOTAL_COUNT"
            echo "  HIGH/CRITICAL: $HIGH_COUNT"

            if [ "$HIGH_COUNT" -gt 0 ]; then
              echo "‚ùå SECURITY GATE FAILED: Found $HIGH_COUNT HIGH/CRITICAL vulnerabilities"
              jq -r '.results[].packages[].vulnerabilities[] | select(.severity == "HIGH" or .severity == "CRITICAL") | "- \(.id): \(.summary) (\(.severity))"' vulnerabilities.json
              exit 1
            else
              echo "‚úÖ No HIGH/CRITICAL vulnerabilities found"
            fi
          else
            echo "‚ö†Ô∏è  No vulnerabilities file generated"
          fi

      # Upload SBOM and scan results as artifacts
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sbom-cyclonedx
          path: |
            sbom.json
            vulnerabilities.json
          retention-days: 30
